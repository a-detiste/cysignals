name: Run Sage CI for Linux/Cygwin/macOS

## This GitHub Actions workflow provides:
##
##  - portability testing, by building and testing this project on many platforms
##    (Linux variants and Cygwin), each with two configurations (installed packages),
##
##  - continuous integration, by building and testing other software
##    that depends on this project.
##
## It runs on every pull request and push of a tag to the GitHub repository.
##
## The testing can be monitored in the "Actions" tab of the GitHub repository.
##
## After all jobs have finished (or are canceled) and a short delay,
## tar files of all logs are made available as "build artifacts".
##
## This GitHub Actions workflow uses the portability testing framework
## of SageMath (https://www.sagemath.org/).  For more information, see
## https://doc.sagemath.org/html/en/developer/portability_testing.html

## The workflow consists of two jobs:
##
##  - First, it builds a source distribution of the project
##    and generates a script "update-pkgs.sh".  It uploads them
##    as a build artifact named upstream.
##
##  - Second, it checks out a copy of the SageMath source tree.
##    It downloads the upstream artifact and replaces the project's
##    package in the SageMath distribution by the newly packaged one
##    from the upstream artifact, by running the script "update-pkgs.sh".
##    Then it builds a small portion of the Sage distribution.
##
## Many copies of the second step are run in parallel for each of the tested
## systems/configurations.

#on: [push, pull_request]

on:
  pull_request:
    types: [opened, synchronize]
  push:
    tags:
      - '*'
  workflow_dispatch:
    # Allow to run manually

env:
  # Ubuntu packages to install so that the project's "setup.py sdist" can succeed
  DIST_PREREQ: python3-setuptools autoconf
  # Name of this project in the Sage distribution
  SPKG:        cysignals
  # Sage distribution packages to build
  TARGETS_PRE: build/make/Makefile
  TARGETS:     SAGE_CHECK=no SAGE_CHECK_PACKAGES="cysignals,cypari" cysignals cypari
  TARGETS_OPTIONAL: build/make/Makefile
  # Standard setting: Test the current beta release of Sage:
  SAGE_REPO:   sagemath/sage
  SAGE_REF:    develop
  REMOVE_PATCHES: "*"

jobs:

  dist:
    runs-on: ubuntu-latest
    steps:
      - name: Check out ${{ env.SPKG }}
        uses: actions/checkout@v2
        with:
          path: build/pkgs/${{ env.SPKG }}/src
      - name: Install prerequisites
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install $DIST_PREREQ
      - name: Run make dist, prepare upstream artifact
        run: |
          (cd build/pkgs/${{ env.SPKG }}/src && autoreconf -fi && python3 setup.py sdist) \
          && mkdir -p upstream && cp build/pkgs/${{ env.SPKG }}/src/dist/*.tar.gz upstream/${{ env.SPKG }}-git.tar.gz \
          && echo "sage-package create ${{ env.SPKG }} --version git --tarball ${{ env.SPKG }}-git.tar.gz --type=standard" > upstream/update-pkgs.sh \
          && if [ -n "${{ env.REMOVE_PATCHES }}" ]; then echo "(cd ../build/pkgs/${{ env.SPKG }}/patches && rm -f ${{ env.REMOVE_PATCHES }}; :)" >> upstream/update-pkgs.sh; fi \
          && ls -l upstream/
      - uses: actions/upload-artifact@v2
        with:
          path: upstream
          name: upstream

  cygwin-without-sage:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version-start: [python-3]
        python-version: [6, 7, 8]
    steps:
    - run: |
        git config --global core.autocrlf false
        git config --global core.symlinks true
    - name: Set up the repository
      uses: actions/checkout@v2
      with:
          submodules: recursive
          fetch-depth: 0
    - name: install cygwin and minimal prerequisites with choco
      shell: bash {0}
      run: |
        choco --version
        choco install make autoconf gcc-core gcc-g++ python3${{ matrix.python-version }}-devel --source cygwin
    - name: install dependencies
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && python3.${{ matrix.python-version }} -m pip install setuptools cysignals Cython Sphinx flake8'
    - name: install
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && python3.${{ matrix.python-version }} setup.py build_ext -i'
    - name: test
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && make configure && ./configure }}'
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && make install PYTHON=python3.${{ matrix.python-version }}'
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && make check-all PYTHON=python3.${{ matrix.python-version }}'
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && make distcheck PYTHON=python3.${{ matrix.python-version }}'

  cygwin:
    env:
      STAGE: i-a
      LOCAL_ARTIFACT_NAME: sage-local-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}
      LOGS_ARTIFACT_NAME: logs-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}
      MAKE: make -j8
      SAGE_NUM_THREADS: 3
      SAGE_CHECK: yes
      SAGE_CHECK_PACKAGES: "!cython,!r,!python3,!python2,!nose,!pathpy,!gap,!cysignals,!linbox,!git,!ppl"
      CYGWIN: winsymlinks:native
      CONFIGURE_ARGS: --enable-experimental-packages --enable-download-from-upstream-url
      SAGE_FAT_BINARY: yes
      SAGE_LOCAL: /opt/sage-cysignals-${{ github.sha }}

    runs-on: windows-latest

    needs: [dist, cygwin-without-sage]

    strategy:
      fail-fast: false
      matrix:
        pkgs: [minimal, standard]
    steps:
    - run: |
        git config --global core.autocrlf false
        git config --global core.symlinks true
    - name: install cygwin with choco
      shell: bash {0}
      run: |
        choco --version
        choco install git python3 --source cygwin
    - name: Check out SageMath
      uses: actions/checkout@v2
      with:
        repository: ${{ env.SAGE_REPO }}
        ref: ${{ env.SAGE_REF }}
    - uses: actions/download-artifact@v2
      with:
        path: upstream
        name: upstream
    - name: install minimal prerequisites with choco
      shell: bash {0}
      run: |
        choco --version
        PACKAGES="python38 python38-pip"
        choco install $PACKAGES --source cygwin
    - name: Update Sage packages from upstream artifact
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && ls -l upstream/ && export PATH="$(pwd)/build/bin:$PATH:/usr/local/bin:/usr/bin" && (cd upstream && bash -x update-pkgs.sh) && git diff'
    - name: tox
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'python3.8 -m pip install tox'
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && PREFIX="${{ env.SAGE_LOCAL }}" tox -e local-cygwin-choco-${{ matrix.pkgs }} -- $TARGETS'
    - name: Prepare logs artifact
      shell: bash
      run: |
        mkdir -p "artifacts/$LOGS_ARTIFACT_NAME"; for a in local/var/tmp/sage/build/*; do if [ -d $a ]; then tar -c --remove-files -f "artifacts/$LOGS_ARTIFACT_NAME/$(basename $a).tar" $a || tar -c --ignore-failed-read -f "artifacts/$LOGS_ARTIFACT_NAME/$(basename $a)-save.tar" $a ; fi; done; cp -r logs/*  "artifacts/$LOGS_ARTIFACT_NAME"
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: artifacts
        name: ${{ env.LOGS_ARTIFACT_NAME }}
      if: always()
    - name: Print out logs for immediate inspection
      # The markup in the output is a GitHub Actions logging command
      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions
      shell: bash
      run: |
        find "artifacts/$LOGS_ARTIFACT_NAME" -type f -name "*.log" -exec sh -c 'if tail -20 "{}" 2>/dev/null | grep "^Error" >/dev/null; then echo :":"error file={}:":" ==== LOG FILE {} CONTAINS AN ERROR ====; cat {} ; fi' \;
      if: always()
    - name: Prepare sage-local artifact
      # We specifically use the cygwin tar so that symlinks are saved/restored correctly on Windows.
      # We remove the $SAGE_LOCAL/lib64 link, which will be recreated by the next stage.
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && rm -f "${{ env.SAGE_LOCAL }}"/lib64; tar -cf /tmp/sage-local-${{ env.STAGE }}.tar --remove-files "${{ env.SAGE_LOCAL }}"'
      if: always()
    - uses: actions/upload-artifact@v2
      # upload-artifact@v2 does not support whitespace in file names.
      # so we tar up the directory ourselves
      with:
        path: C:\\tools\\cygwin\\tmp\\sage-local-${{ env.STAGE }}.tar
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
      if: always()

  ubuntu-without-sage:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
    steps:
    - name: Set up the repository
      uses: actions/checkout@v2
      with:
          submodules: recursive
          fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install setuptools Cython Sphinx flake8
    - name: Freeze pip
      run: |
          pip freeze
    - name: Local build
      run: |
        make configure
        ./configure
        make -j4 install
        make -j4 check-all
        make -j4 distcheck

  docker:
    uses: sagemath/sage/.github/workflows/docker.yml@develop
    with:
      # FIXME: duplicated from env.TARGETS
      targets_pre:       build/make/Makefile
      targets:           SAGE_CHECK=no SAGE_CHECK_PACKAGES="cysignals,cypari" cysignals cypari
      targets_optional:  build/make/Makefile
      sage_repo:         sagemath/sage
      sage_ref:          develop
      upstream_artifact: upstream
      # We prefix the image name with the SPKG name ("cysignals-") to avoid the error
      # 'Package "sage-docker-..." is already associated with another repository.'
      docker_push_repository: ghcr.io/${{ github.repository }}/cysignals-
    needs: [dist, ubuntu-without-sage]

  macos-without-sage:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
    steps:
    - name: Set up the repository
      uses: actions/checkout@v2
      with:
          submodules: recursive
          fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install setuptools Cython Sphinx flake8
    - name: Freeze pip
      run: |
          pip freeze
    - name: Local build
      run: |
        make configure
        ./configure
        make -j4 install
        make -j4 check-all
        make -j4 distcheck

  macos:

    runs-on: macos-latest
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        os: [ macos-12 ]
        tox_system_factor: [homebrew-macos-urlocal, conda-forge-macos]
        tox_packages_factor: [minimal, standard]
        xcode_version_factor: [default]

    needs: [dist, macos-without-sage]

    env:
      TOX_ENV: local-${{ matrix.tox_system_factor }}-${{ matrix.tox_packages_factor }}
      LOGS_ARTIFACT_NAME: logs-commit-${{ github.sha }}-tox-local-${{ matrix.tox_system_factor }}-${{ matrix.tox_packages_factor }}-${{ matrix.os }}-xcode_${{ matrix.xcode_version_factor }}
      DOCKER_TARGETS: configured with-targets with-targets-optional

    steps:

      - name: Select Xcode version
        run: |
          if [ ${{ matrix.xcode_version_factor }} != default ]; then sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode_version_factor }}.app; fi
      - name: Check out SageMath
        uses: actions/checkout@v2
        with:
          repository: ${{ env.SAGE_REPO }}
          ref: ${{ env.SAGE_REF }}
      - uses: actions/download-artifact@v2
        with:
          path: upstream
          name: upstream
      - name: Update Sage packages from upstream artifact
        run: |
          (export PATH=$(pwd)/build/bin:$PATH; (cd upstream && bash -x update-pkgs.sh) && git diff)

      - name: Install test prerequisites
        run: |
          brew install tox
      - name: Build and test with tox
        # We use a high parallelization on purpose in order to catch possible parallelization bugs in the build scripts.
        # For doctesting, we use a lower parallelization to avoid timeouts.
        run: |
          MAKE="make -j12" tox -e $TOX_ENV -- SAGE_NUM_THREADS=4 $TARGETS
      - name: Prepare logs artifact
        run: |
          mkdir -p "artifacts/$LOGS_ARTIFACT_NAME"; cp -r .tox/*/log "artifacts/$LOGS_ARTIFACT_NAME"
        if: always()
      - uses: actions/upload-artifact@v1
        with:
          path: artifacts
          name: ${{ env.LOGS_ARTIFACT_NAME }}
        if: always()
      - name: Print out logs for immediate inspection
        # and markup the output with GitHub Actions logging commands
        run: |
          .github/workflows/scan-logs.sh "artifacts/$LOGS_ARTIFACT_NAME"
        if: always()
